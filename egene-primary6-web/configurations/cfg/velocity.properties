##################################
##### VELOCITY CONFIGURATION #####
#
# References:
# http://velocity.apache.org/engine/releases/velocity-1.7/developer-guide.html#Velocity_Configuration_Keys_and_Values



##### Character Encoding #####

# Character encoding for input (templates). 
# Using this, you can use alternative encoding for your templates, such as UTF-8.
input.encoding = ISO-8859-1

# Character encoding for output streams from the VelocityServlet and Anakia. 
output.encoding = ISO-8859-1



##### #evaluate() Directive #####

# Used in the #evaluate() directive, defines the class that is used for the context local to the argument for #evaluate().
directive.evaluate.context.class = org.apache.velocity.VelocityContext



##### #foreach() Directive #####

# Used in the #foreach() directive, defines the string to be used as the context key for the loop count. 
# A template would access the loop count as $velocityCount.
directive.foreach.counter.name = velocityCount

# Used in the #foreach() directive, defines the string to be used as the context key for the "has next" value. 
# A template would access this as $velocityHasNext.
directive.foreach.iterator.name = velocityHasNext

# Default starting value for the loop counter reference in a #foreach() loop.
directive.foreach.counter.initial.value = 1

# Maximum allowed number of loops for a #foreach() statement.
directive.foreach.maxloops = -1

# Tells #foreach to simply skip rendering when the object it is iterating over is not or cannot produce a valid Iterator.
directive.foreach.skip.invalid = true



##### #set() Directive #####

# If true, having a right hand side of a #set() statement with an invalid reference or null value will set the left hand side to null. 
# If false, the left hand side will stay the same.
directive.set.null.allowed = false



##### #include() and #parse() Directive #####

# Defines the beginning and ending tags for an in-stream error message in the case of a problem with the #include() directive. 
# If both the .start and .end tags are defined, an error message will be output to the stream, of the form '.start msg .end' where .start and .end refer to the property values. 
# Output to the render stream will only occur if both the .start and .end (next) tag are defined.
directive.include.output.errormsg.start =
directive.include.output.errormsg.end = ]]-->

# Defines the allowable parse depth for a template. 
# A template may #parse() another template which itself may have a #parse() directive. 
# This value prevents runaway #parse() recursion.
directive.parse.max.depth = 10



##### Math #####

# Switch to control logging of 'found' messages from resource manager. 
# When a resource is found for the first time, the resource name and classname of the loader that found it will be noted in the runtime log.
resource.manager.logwhenfound = true



##### Resource Management #####

# Switch to control logging of 'found' messages from resource manager. 
# When a resource is found for the first time, the resource name and classname of the loader that found it will be noted in the runtime log.
resource.manager.logwhenfound = true

# Declares the class to be used for resource caching. 
# The current default is org.apache.velocity.runtime.resource.ResourceCacheImpl which uses a LRU Map to prevent data from being held forever. 
# You can set the size of the LRU Map using the parameter resource.manager.defaultcache.size. 
# The default value of the default cache size is currently 89.
# resource.manager.cache.class

# Sets the size of the default implementation of the resource manager resource cache.
# resource.manager.defaultcache.size

# Multi-valued key. Will accept CSV for value. Public name of a resource loader to be used. 
# This public name will then be used in the specification of the specific properties for that resource loader. 
# Note that as a multi-valued key, it's possible to pass a value like "file, class" (sans quotes), indicating that following will be configuration values for two loaders.
# resource.loader = <name> (default = file)
#resource.loader = class
resource.loader = file

# Description string for the given loader.
# <name>.loader.description = Velocity File Resource Loader
#class.loader.description = Velocity Classpath Resource Loader
file.loader.description = Velocity File Resource Loader

# Name of implementation class for the loader. The default loader is the file loader.
# <name>.resource.loader.class = org.apache.velocity.runtime.resource.loader.FileResourceLoader
#class.resource.loader.class = org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader
file.resource.loader.class = org.apache.velocity.runtime.resource.loader.FileResourceLoader

# Multi-valued key. Will accept CSV for value. Root(s) from which the loader loads templates. 
# Templates may live in subdirectories of this root. ex. homesite/index.vm This configuration key applies currently to the FileResourceLoader and JarResourceLoader.
# <name>.resource.loader.path = .
#class.resource.loader.path = .
file.resource.loader.path = ${velocity.properties.file.resource.loader.path}

# Controls caching of the templates in the loader. 
# Default is false, to make life easy for development and debugging. 
# This should be set to true for production deployment. When 'true', the modificationCheckInterval property applies. 
# This allows for the efficiency of caching, with the convenience of controlled reloads - useful in a hosted or ISP environment where templates can be modifed frequently and bouncing the application or servlet engine is not desired or permitted.
# <name>.resource.loader.cache = false
#class.resource.loader.cache = true
file.resource.loader.cache = true

# This is the number of seconds between modification checks when caching is turned on. 
# When this is an integer > 0, this represents the number of seconds between checks to see if the template was modified. 
# If the template has been modified since last check, then it is reloaded and reparsed. 
# Otherwise nothing is done. When <= 0, no modification checks will take place, and assuming that the property cache (above) is true, 
# once a template is loaded and parsed the first time it is used, 
# it will not be checked or reloaded after that until the application or servlet engine is restarted. 
# <name>.resource.loader.modificationCheckInterval = 2
#class.resource.loader.modificationCheckInterval = 0
file.resource.loader.modificationCheckInterval = 0



##### Velocimacro #####

# Multi-valued key. Will accept CSV for value. Filename(s) of Velocimacro library to be loaded when the Velocity Runtime engine starts. 
# These Velocimacros are accessable to all templates. 
# The file is assumed to be relative to the root of the file loader resource path.
velocimacro.library = velocity-global-library.vm

# Determines of the definition of new Velocimacros via the #macro() directive in templates is allowed. 
# The default value is true, meaning any template can define and use new Velocimacros. 
# Note that depending on other properties, those #macro() statements can replace global definitions.
velocimacro.permissions.allow.inline = true

# Controls if a Velocimacro defind 'inline' in a template can replace a Velocimacro defined in a library loaded at startup.
velocimacro.permissions.allow.inline.to.replace.global = false

# Controls 'private' templates namespaces for Velocimacros. When true, a #macro() directive in a template creates a Velocimacro that is accessable only from the defining template. 
# This means that Velocimacros cannot be shared unless they are in the global or local library loaded at startup. 
# (See above.) It also means that templates cannot interfere with each other. 
# This property also allows a technique where there is a 'default' Velocimacro definition in the global or local library, and a template can 'override' the implementation for use within that template. 
# This occurrs because when this property is true, the template's namespace is searched for a Velocimacro before the global namespace, therefore allowing the override mechanism.
velocimacro.permissions.allow.inline.local.scope = true

# Controls whether reference access (set/get) within a Velocimacro will change the context, or be of local scope in that Velocimacro.
#velocimacro.context.localscope = true

# Controls Velocimacro library autoloading. 
# When set to true the source Velocimacro library for an invoked Velocimacro will be checked for changes, and reloaded if necessary. 
# This allows you to change and test Velocimacro libraries without having to restart your application or servlet container, just like you can with regular templates. 
# This mode only works when caching is off in the resource loaders (e.g. file.resource.loader.cache = false ). 
# This feature is intended for development, not for production.
velocimacro.library.autoreload = false

# When set to true, will throw a ParseErrorException when parsing a template containing a macro with an invalid number of arguments. 
# Is set to false by default to maintain backwards compatibility with templates written before this feature became available. 
velocimacro.arguments.strict = false